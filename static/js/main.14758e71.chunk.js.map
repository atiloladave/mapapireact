{"version":3,"sources":["App.js","mapStyles.js","serviceWorker.js","index.js"],"names":["libraries","mapContainerStyle","width","height","center","lat","lng","options","styles","featureType","elementType","stylers","weight","color","visibility","saturation","lightness","disableDefaultUI","zoomControl","App","useLoadScript","isLoaded","loadError","React","useState","markers","setMarkers","selected","setSelected","onMapClick","useCallback","event","current","latLng","time","Date","mapRef","useRef","onMapLoad","map","Search","zoom","onClick","onLoad","marker","key","toISOString","position","icon","url","scaledSize","window","google","maps","Size","origin","Point","anchor","onCloseClick","formatRelative","usePlacesAutocomplete","requestOptions","location","radius","ready","value","suggestions","status","data","setValue","className","onSelect","address","console","log","onChange","e","target","disabled","placeholder","id","description","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.14758e71.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  GoogleMap,\n  useLoadScript,\n  Marker,\n  InfoWindow,\n} from \"@react-google-maps/api\";\n\n// import {Bootstrap} from 'react-bootstrap';\nimport { formatRelative } from \"date-fns\";\n\nimport usePlacesAutocomplete, {\n  \n} from \"use-places-autocomplete\";\nimport {\n  Combobox,\n  ComboboxInput,\n  ComboboxPopover,\n  ComboboxOption,\n} from \"@reach/combobox\";\n\n\nimport \"@reach/combobox/styles.css\";\nimport mapStyles from \"./mapStyles\"\n\n\nconst libraries = [\"places\"]\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\",\n};\n\n  const center = {\n    lat: 9.081999,\n    lng: 8.675277,\n  };\n\n  const options = {\n      styles: mapStyles,\n      disableDefaultUI: true,\n      zoomControl: true,\n  };\n\nexport default function App() {\n  const {isLoaded, loadError} = useLoadScript({\n    libraries,\n  });\n\n  const [markers, setMarkers] = React.useState([]);\n\n  const [selected, setSelected] = React.useState(null);\n\n  const onMapClick = React.useCallback((event) => {\n    setMarkers((current) => [\n      ...current,\n      {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng(),\n        time: new Date(),\n      },\n    ]);\n  }, []);\n\n  const mapRef = React.useRef();\n  const onMapLoad = React.useCallback((map) => {\n    mapRef.current = map;\n  }, []);\n\n\n\n  if (loadError) return \"Error loading maps\";\n  if (!isLoaded) return \"Loading Maps\";\n\n\n\n  return <div>\n\n    <Search />\n    <GoogleMap \n    mapContainerStyle={mapContainerStyle} \n    zoom={8} \n    center={center}\n    options={options}\n    onClick={onMapClick}\n    onLoad={onMapLoad}\n    >\n      {markers.map((marker => <Marker key={marker.time.toISOString()} position={{ lat: marker.lat, lng: marker.lng }} \n      icon={{\n        url: \"/pickmeup.png\",\n        scaledSize: new window.google.maps.Size(30, 30),\n        origin: new window.google.maps.Point(0, 0),\n        anchor: new window.google.maps.Point(15, 15),\n      }}\n\n      onClick={() => {\n        setSelected(marker);\n      }}\n      \n      />))}\n\n      {selected ? (\n      <InfoWindow position={{ lat: selected.lat, lng: selected.lng }}\n      onCloseClick={() => {\n        setSelected(null);\n      }}\n      >\n        <div>\n          <h2>Current Location</h2>\n          <p>Location {formatRelative(selected.time, new Date())} </p>\n        </div>\n      </InfoWindow>\n      ) : null }\n    </GoogleMap>\n  </div>;\n};\n\nfunction Search() {\n  const { ready, value, \n    suggestions: { status, data }, setValue,} = usePlacesAutocomplete({\n    requestOptions: {\n      location: { lat: () => 9.081999, lng: () => 8.675277 },\n      radius: 200 * 1000,\n    },\n  });\n\n  return (\n    <div className=\"search\">\n    <Combobox\n    onSelect={(address) => {\n      console.log(address);\n    }}\n    >\n      <ComboboxInput \n      value={value}\n      onChange={(e) => {\n        setValue(e.target.value)\n      }}\n      disabled={!ready}\n      placeholder=\"Find My Location\"\n        /> \n        <ComboboxPopover>       \n            {status === \"OK\" && data.map(({ id, description }) => (\n                <ComboboxOption key={id} value={description} />\n              ))}         \n        </ComboboxPopover>\n    </Combobox>\n    </div>\n  )\n}","export default [\r\n    {\r\n      featureType: \"all\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          weight: \"2.00\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"all\",\r\n      elementType: \"geometry.stroke\",\r\n      stylers: [\r\n        {\r\n          color: \"#9c9c9c\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"all\",\r\n      elementType: \"labels.text\",\r\n      stylers: [\r\n        {\r\n          visibility: \"on\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"landscape\",\r\n      elementType: \"all\",\r\n      stylers: [\r\n        {\r\n          color: \"#f2f2f2\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"landscape\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#ffffff\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"landscape.man_made\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#ffffff\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"poi\",\r\n      elementType: \"all\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"all\",\r\n      stylers: [\r\n        {\r\n          saturation: -100,\r\n        },\r\n        {\r\n          lightness: 45,\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#eeeeee\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#7b7b7b\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road\",\r\n      elementType: \"labels.text.stroke\",\r\n      stylers: [\r\n        {\r\n          color: \"#ffffff\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road.highway\",\r\n      elementType: \"all\",\r\n      stylers: [\r\n        {\r\n          visibility: \"simplified\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"road.arterial\",\r\n      elementType: \"labels.icon\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"transit\",\r\n      elementType: \"all\",\r\n      stylers: [\r\n        {\r\n          visibility: \"off\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"water\",\r\n      elementType: \"all\",\r\n      stylers: [\r\n        {\r\n          color: \"#46bcec\",\r\n        },\r\n        {\r\n          visibility: \"on\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"water\",\r\n      elementType: \"geometry.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#c8d7d4\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"water\",\r\n      elementType: \"labels.text.fill\",\r\n      stylers: [\r\n        {\r\n          color: \"#070707\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      featureType: \"water\",\r\n      elementType: \"labels.text.stroke\",\r\n      stylers: [\r\n        {\r\n          color: \"#ffffff\",\r\n        },\r\n      ],\r\n    },\r\n  ];","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}